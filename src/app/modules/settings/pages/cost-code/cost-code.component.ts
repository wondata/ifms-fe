declare var Ext: any;

import { ChangeDetectorRef, Component, OnInit } from '@angular/core';
import { Select, Store } from '@ngxs/store';
import { Observable } from 'rxjs';
import { CostCode } from 'src/app/models/defaultSettings';
import { CreateCostCode, DeleteCostCode, ListCostCode } from '../../store/action/setting.action';
import { SettingState } from '../../store/states/setting.state';
@Component({
  selector: 'app-cost-code',
  templateUrl: './cost-code.component.html',
  styleUrls: ['./cost-code.component.scss'],
})
export class CostCodePageComponent implements OnInit {
    @Select(SettingState.listCostCode) listCostCode$: Observable<CostCode>;
    stored = Ext.create('Ext.data.Store', {

    });
    form: any;
    isDialogShowing: boolean = false;

    constructor(private readonly store: Store, private cd: ChangeDetectorRef) {}

  ngOnInit() {

    this.store.dispatch(new ListCostCode());

    this.listCostCode$.subscribe((stateValue) => {
        this.stored.setData(stateValue);
    });

  }

  onFormReady = function (event) {
    this.form = event.cmp;
  }
  saveForm = (evnt) => {
    let model: CostCode;
    if (!this.form.validate()) return;

    model = this.form.getValues();

    this.store.dispatch(new CreateCostCode(model))
        .subscribe(() => {
          this.store.dispatch(new ListCostCode());
        });
  }

   onAdd = () => {
    this.isDialogShowing = true;
    this.cd.detectChanges();

    this.form.setTitle('Add Cost Code')
  }


   onEdit = (grid, info) => {
    let record = info.record;

    this.isDialogShowing = true;
    this.cd.detectChanges();

    this.form.setTitle('Edit Cost Code')
    this.form.setValues(record.data);
  }

  onDelete = (grid, info) => {
    let cmp = this;

    Ext.Msg.show({
      title: "Confirmation",
      message: "Are you sure you want to delete the selected record ?",
      buttonAlign: 'right',
      buttons: Ext.MessageBox.YESNO,
      buttonToolbar: {
        xtype: 'toolbar',
        itemId: 'buttonToolbar',
        docked: 'bottom',
        defaultType: 'button',
        weighted: true,
        ui: 'footer',
        defaultButtonUI: '',
        layout: {
          type: 'box',
          vertical: false,
          pack: 'center'
        }
      },
      fn: function (answer) {
        if (answer === "yes") {
          let record = info.record;
          //exclude the id property which is generated by extAngular
          const { id, ...selectedRecord } = record.data;
          // debugger;
           cmp.store.dispatch(new DeleteCostCode(selectedRecord))
              .subscribe(() => {
                cmp.store.dispatch(new ListCostCode());
              });

        } else {
          return;
        }
      }
    });

  }

  cancelForm = (evnt) => {
    this.form.reset(true);

    this.isDialogShowing = false;
    this.cd.detectChanges();
  }

}
