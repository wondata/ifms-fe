declare var Ext: any;

import { Component, Input, OnInit } from '@angular/core';
import { Select, Store } from '@ngxs/store';
import { Observable } from 'rxjs';
import { Cashier, CostCode } from '../../../../models/defaultSettings';
import { GridEditableFormService } from '../../../../_services/grid-editable-form.service';
import { CreateCashier, DeleteCashier, ListCashier } from '../../store/action/setting.action';
import { SettingState } from '../../store/states/setting.state';


@Component({
  selector: 'app-cashier',
  templateUrl: './cashier.compnent.html',
  styleUrls: ['./cashier.component.scss'],
})
export class CashierComponent implements OnInit {
   @Input() listCashier: CostCode;

   @Select(SettingState.listCashier) listCashier$: Observable<CostCode>;
   @Select(SettingState.listAccounts) listAccounts$: Observable<any>;
   @Select(SettingState.listUsers) listUsers$: Observable<any>;


    stored = Ext.create('Ext.data.Store', {
    });


    grid:any;
    form: any;
    isDialogShowing: boolean = false;
    subsidiaryEditor : any;
    subsidiaryOptions : any;
    editablePlugin: any;
    userEditor : any;
    userOptions : any;

  constructor(private readonly store: Store, private gridEditableFormService: GridEditableFormService) {}

  ngOnInit() {
      this.getLookups();
    }

    getLookups (){
      this.listCashier$.subscribe((stateValue) => {
          this.stored.setData(stateValue);
      });

      this.listAccounts$.subscribe((data) => {
          this.subsidiaryOptions = data;
          this.subsidiaryEditor = { xtype: 'selectfield', options: data };
      });

      this.listUsers$.subscribe((data) => {
          this.userOptions = data;
          this.userEditor = { xtype: 'selectfield', options: data };
      });

    }

    onGridReady = function (event) {
      this.grid = event.cmp;
      this.editablePlugin = this.grid.getPlugins()[0]; // editablegrid is index 2 in plugins array of this grid

      let component = this;

      this.editablePlugin.onSubmitTap = Ext.Function.createInterceptor(this.editablePlugin.onSubmitTap, function (name) {
        component.SaveCashier(this.form.getValues());
        this.sheet.hide();
        return false; // return false if you don't want the default submit operation to be executed
      });
    };

    onAdd = function() {
      const newModel = {} as Cashier;
      let index = 0;
      this.stored.insert(index, newModel);

      this.gridEditableFormService.openGridEditableForm(this.grid, this.stored, index, this.editablePlugin);
    };

    onChilddoubletap = ({ sender, location  }) => {
      this.gridEditableFormService.openGridEditableForm(this.grid, this.stored, location.recordIndex, this.editablePlugin);
    }


    gridReady = (event) => {
        this.grid = event.cmp;
    }

    SaveCashier(params: any) {
      this.store.dispatch(new CreateCashier(params))
        .subscribe(() => {
          this.store.dispatch(new ListCashier());
        });

    }

    onDelete = (grid, info) => {
    let cmp = this;

    Ext.Msg.show({
      title: "Confirmation",
      message: "Are you sure you want to delete the selected record ?",
      buttonAlign: 'right',
      buttons: Ext.MessageBox.YESNO,
      buttonToolbar: {
        xtype: 'toolbar',
        itemId: 'buttonToolbar',
        docked: 'bottom',
        defaultType: 'button',
        weighted: true,
        ui: 'footer',
        defaultButtonUI: '',
        layout: {
          type: 'box',
          vertical: false,
          pack: 'center'
        }
      },
      fn: function (answer) {
        if (answer === "yes") {
          let record = info.record;
          //exclude the id property which is generated by extAngular
          const { id, ...selectedRecord } = record.data;
          // debugger;
           cmp.store.dispatch(new DeleteCashier(selectedRecord))
              .subscribe(() => {
                cmp.store.dispatch(new ListCashier());
              });

        } else {
          return;
        }
      }
    });

  }


    renderColumn = (value, record, dataIndex, cell, column) => {

        var selectedRecord;
        if (dataIndex === "SubsidiaryAccountId") {
          selectedRecord = this.subsidiaryOptions?.find(i => i.value === value);
        }else if (dataIndex === "UserId") {
          selectedRecord = this.userOptions?.find(i => i.value === value);
        }
        if (selectedRecord !== undefined) {
          return selectedRecord.text;
        }

        return value;
      }

}
